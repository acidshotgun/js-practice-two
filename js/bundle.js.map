{"version":3,"file":"bundle.js","mappingskBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC7KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,MAAM,SAAS;AACpD,kDAAkD,WAAW;AAC7D,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,IAAI,WAAW,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iCAAiC;AAC3D;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mCAAmC;AAC7D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,kCAAkC,WAAW;AAC7C,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpNA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC/EA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA,iBAAiB,mBAAO,CAAC,4CAAgB;AACzC,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,iBAAiB,mBAAO,CAAC,4CAAgB;AACzC,kBAAkB,mBAAO,CAAC,8CAAiB;AAC3C,mBAAmB,mBAAO,CAAC,gDAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,C","sources":["webpack://food/./js/modules/calc.js","webpack://food/./js/modules/cards.js","webpack://food/./js/modules/forms.js","webpack://food/./js/modules/modal.js","webpack://food/./js/modules/slider.js","webpack://food/./js/modules/tabs.js","webpack://food/./js/modules/timer.js","webpack://food/webpack/bootstrap","webpack://food/./js/script.js"],"sourcesContent":["function calc() {\r\n\r\n    // Calc\r\n\r\n    // Результат колорий\r\n    const result = document.querySelector('.calculating__result span');\r\n    // Параметры которые будут меняться\r\n    // Ставим зн-я sex и  ratio по умолчанию чтобы изначально они как бы были уже нажаты\r\n    // Иначе девушка с умеренной подвижностью введет только цифровые данные и ничего меняться не будет\r\n        // Там нужно будет еще раз кликать на пол и умеренную активность\r\n    let sex, height, weight, age, ratio;\r\n\r\n    // Ниже по коду идет запись значений в локальное хранилище\r\n    // Тут проверим что если эти значения существуют то пусть они будут заполнены\r\n    if (localStorage.getItem('sex')) {\r\n        sex = localStorage.getItem('sex');\r\n    } else {\r\n        // Если нет то это значение будет по умолчанию\r\n        sex = 'female';\r\n        localStorage.setItem('sex', 'female');\r\n    }\r\n\r\n    if (localStorage.getItem('ratio')) {\r\n        ratio = localStorage.getItem('ratio');\r\n    } else {\r\n        // Если нет то это значение будет по умолчанию\r\n        ratio = 1.375;\r\n        localStorage.setItem('ratio', 1.375);\r\n    }\r\n\r\n    // Ф-я которая инициализирует калькулятор и при загрузке будет подставлять параметры из localStorage и активность\r\n    function initLocalSettings(selector, activeClass) {\r\n        // Получаем элемент из селектора в аргументе (а именно div внутри)\r\n        const element = document.querySelectorAll(selector);\r\n\r\n        // Перебераем каждый элемент и убираем все классы активности\r\n        element.forEach(elem => {\r\n            elem.classList.remove(activeClass);\r\n            // Проверяем если в localStorage есть 'sex' и она равер элементу по id то даем класс актсиновти\r\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n            \r\n            // Аналогично тут но сравнение по localStorage и data атрибуту\r\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Инициилизируем ф-ю при фходе и обновлении страницы\r\n    initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n    // У нас будет две функции одна будет брать значения из инпутов вторая из блоков с активностью дневной\r\n    \r\n    // Ф-я подсчета конечного результат (основная)\r\n    // Для начала мы проверим условия чтобы все нужные параметры были заполнены\r\n    // Те если они не заполнены то == false. Используем (!)\r\n    // Эта ф-я будет вызываться после каждого обновления параметров клик и ввод\r\n    function calcTotal() {\r\n        if (!sex || !height || !weight || !age || !ratio) {\r\n            result.textContent = '____';\r\n            // Такой прием с return используется чтобы прервать функцию тогда код ниже идти не будет\r\n            return;\r\n        }\r\n\r\n        // Далее исходим из того какой пол выбран\r\n        // А формула взята из инета\r\n        // округляем до ближайшего целого Math.round\r\n        if (sex === 'female') {\r\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\r\n        } else {\r\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\r\n        }\r\n    }\r\n\r\n    // Вызываем чтобы очистить поле с калориями\r\n    calcTotal();\r\n\r\n    // Теперь ф-ии получения данных\r\n    // Первая ф-я будет получать данные со статического контента, те где просто нужно выбрать суточную активность\r\n    // Аргументы это селектор и класс активности\r\n    // Одна эта ф-я будет вызываться с аргументами для блока с полом и для блока с активностью отдельно\r\n    // По аргументами\r\n    function getStaticInformation(selector, activeClass) {\r\n        // Получаем элементы внутри блока\r\n        // Получаем все div внутри этого родителя\r\n        const elements = document.querySelectorAll(selector);\r\n\r\n        // Перебором вешаем на каждый элемент слушатель\r\n        elements.forEach(elem => {\r\n            elem.addEventListener('click', (event) => {\r\n                // У выбора пола и активности разные атрибуты\r\n                // Активность имеет дата атрибут а пол id\r\n                // Тут прописываем условия при клике и получаем разные атрибуты\r\n                // При клике на активность (у нее атрибут) будем получать значение активности\r\n                if (event.target.getAttribute('data-ratio')) {\r\n                    ratio = +event.target.getAttribute('data-ratio');\r\n                    // Так же добавим localStorage чтобы данные запоминались\r\n                    localStorage.setItem('ratio', +event.target.getAttribute('data-ratio'));\r\n                } else {\r\n                    // При клике на пол (у него id) будем получать в sex пол\r\n                    sex = event.target.getAttribute('id');\r\n                    localStorage.setItem('sex', event.target.getAttribute('id'));\r\n                }\r\n    \r\n                // Убираем все классы активности которые передаем в функцию\r\n                elements.forEach(elem => {\r\n                    elem.classList.remove(activeClass);\r\n                });\r\n    \r\n                // Затем класс активности назначаем нажатому элементу\r\n                event.target.classList.add(activeClass);\r\n    \r\n                // Вызываем чтобы ф-я чтобы значение калорий менялось после каждого обновления параметров\r\n                calcTotal();\r\n            });\r\n        });\r\n    }\r\n\r\n    // Вызываем эту функцию для двух статичных блоков по разным аргументам (сам блок в верстке и класс активности при клике)\r\n    // 1) Это будет по id gender обращаемся к div 2) Это класс активности для выделения (это все в верстке)\r\n    // Блок с полом\r\n    getStaticInformation('#gender div', 'calculating__choose-item_active');\r\n    // Блок с активностью\r\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n\r\n    // Пишем ф-я которая будет собирать данные с введенных параметров (которые надо вводить)\r\n    // Аргементы это селектр инпута\r\n    function getDynamicInformation(selector) {\r\n        // Получаем тот инпут с которым работаем\r\n        const input = document.querySelector(selector);\r\n\r\n        // Обработчик ввода для поля в котором происходит ввод\r\n        input.addEventListener('input', () => {\r\n\r\n            // Составляем условие при котором будет проверятся тип вводимых данных при инпуте\r\n            // Если это не число то будет красная обводка\r\n            // Если число то обводки нет\r\n            if (input.value.match(/\\D/g)) {\r\n                input.style.border = '2px solid red';\r\n            } else {\r\n                input.style.border = 'none';\r\n            }\r\n\r\n            // Чтобы понять какой именно инпут заполняется в данный момент можно использовать switch case\r\n            // В условии мы получаем атрибут выбранного элемента по id и указываем д-я для каждлого условия (инпута)\r\n            switch(input.getAttribute('id')) {\r\n                case 'height':\r\n                    height = +input.value;\r\n                    break;\r\n                case 'weight':\r\n                    weight = +input.value;\r\n                    break;\r\n                case 'age':\r\n                    age = +input.value;\r\n                    break;\r\n            }\r\n            // Теперь ф-я ореинтируется на инпут и ореинтируя на id записывает данные в опр переменную\r\n\r\n            // Вызываем чтобы ф-я чтобы значение калорий менялось после каждого обновления параметров\r\n            calcTotal();\r\n        });\r\n    }\r\n\r\n    // Теперь вызываем с трея разными селекторами чтобы работала\r\n    getDynamicInformation('#weight');\r\n    getDynamicInformation('#height');\r\n    getDynamicInformation('#age');\r\n}\r\n\r\nmodule.exports = calc;","function cards() {\r\n    // Classes for tabs\r\n    // Идея - шаблонизировать карточки и создавать их передвая нужные аргументы\r\n\r\n    // Как создать класс карточки?\r\n    // 1) src - путь к изображению, 2) Текст если картинка поламалась, 3) Title, 4) Descr, 5) Price\r\n    // Эти св-ва задаются в кач-ве аргумента в конструктор\r\n    // parentSelector это передваемый контейнер где будут наши элементы\r\n\r\n    // Посколько мы можем добавлять множество классов мы воспользуемся оператором rest(...classes)\r\n    class MenuCard {\r\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) {\r\n            this.src = src;\r\n            this.alt = alt;\r\n            this.title = title;\r\n            this.descr = descr;\r\n            this.price = price;\r\n            this.parent = document.querySelector(parentSelector);\r\n            this.classes = classes;\r\n            this.transfer = 27;\r\n            this.changeToUAH();\r\n        }\r\n\r\n        // Далее создаем методы и первый метот смена курса валют будет вызваться прямо в конструкторе\r\n        changeToUAH() {\r\n            this.price = this.price * this.transfer;\r\n        }\r\n\r\n        // Метод render. Нужно создать элемент и поместить его в верстку. Верстку дополнить данными - аргументами\r\n        // И поместить элемент на страницу\r\n        render() {\r\n         // Тут мы создаем элемент и помещаем его в переменную element (этот элемент будет помещен в контейнер в html)\r\n            const element = document.createElement('div');\r\n            // Если в оператор rest ничего не передается мы присваиваем значение по умолчанию\r\n            if (this.classes.length === 0) {\r\n                this.classes = 'menu__item';\r\n                element.classList.add(this.element);\r\n            } else {\r\n                // Тк rest дает нам массив то мы перебираем его и присваиваем element класс который получим в className\r\n                this.classes.forEach(className => element.classList.add(className));\r\n            }\r\n            // Помещаем в element содержимое которое будет рендерится в нашей верстке\r\n            element.innerHTML = `\r\n                <img src=${this.src} alt=${this.alt}>\r\n                <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n                <div class=\"menu__item-descr\">${this.descr}</div>\r\n                <div class=\"menu__item-divider\"></div>\r\n                <div class=\"menu__item-price\">\r\n                    <div class=\"menu__item-cost\">Цена:</div>\r\n                    <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n                </div>\r\n            `;\r\n\r\n            // Ранее мы создали переменную parent в классе\r\n            // В него мы передаем в данном случае контейнер, в который будем помещать созданные элементы\r\n            this.parent.append(element);\r\n        }\r\n    }\r\n\r\n    // Создаем функцию которая будет получать с сервера данные для создания карточек\r\n    const getResource = async (url) => {\r\n        const res = await fetch(url);\r\n\r\n        // Поскольку fetch() не обрабатывает ошибки кроме 404 он не активирует catch, поэтому их надо прописать самим\r\n        // ok - Этот сатус как 200\r\n        // Если статус не ок, то выкинем ошибку (throw) и пояснение что за ошибка\r\n        // Создается как объект new и теперь можем получить url и статус ошибки\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    };\r\n\r\n    // Вызываем функцию, где аргументом будет ссылка на массив с карточками в базе данных\r\n    // getResource('http://localhost:3000/menu')\r\n    // // Обрабатываем полож исход\r\n    // .then(data => {\r\n    //     // Тк в бд это массив беребираем его. Аргумент это объекты в массиве (деструктуризация)\r\n    //     // И на их основе создается новый объект от класса с аргументами\r\n    //     // Затем render() будет генерировать верстку табов на сайте\r\n    //     data.forEach(({img, altimg, title, descr, price}) => {\r\n    //         new MenuCard(img, altimg, title, descr, price, '.menu .container', 'menu__item').render();\r\n    //     });\r\n    // });\r\n\r\n\r\n    // Вариант создания с помощью axios\r\n    axios.get('http://localhost:3000/menu')\r\n    .then(data => {\r\n        data.data.forEach(({img, altimg, title, descr, price}) => {\r\n            new MenuCard(img, altimg, title, descr, price, '.menu .container', 'menu__item').render();\r\n        });\r\n    });\r\n    \r\n\r\n    // Этот подход избавил нас от создания этих карточек тут вручную\r\n    // И теперь они создлаются на основании данных с базы данных\r\n}\r\n\r\nmodule.exports = cards;","function forms() {\r\n\r\n    // Forms\r\n    //!!!!!\r\n    const forms = document.querySelectorAll('form');\r\n\r\n    // Объект сообщений для различных исходов для запроса\r\n    const message = {\r\n        loading: 'img/form/005spinner.svg',\r\n        success: 'Спасибо! Скоро мы с вами свяжемся',\r\n        failure: 'Что-то пошло не так...',\r\n    };\r\n\r\n    // Вешаем обработчик submit на каждую форму их две\r\n    // Через ф-ю. Она будет вешать обработчик на формы\r\n    // Просто вызвав ф-ю postData() на каждую форму\r\n    forms.forEach(item => {\r\n        bindPostData(item);\r\n    });\r\n\r\n    //!Комментарии!\r\n    // Создаем функцию отправки данных на сервер в базу данных\r\n    // Аргументами будет принимать ссылку и то что нужно отрпавить\r\n    // Возвращаться будет результат записанный в переменную res и переведенный в формат обычного объекта методом json()\r\n    // В теле будет передаваться аргумент (это будут те данные которые мы быдем отправлять на серв)\r\n\r\n    // НО это асинхронный код и он не будет ждать (промисы асинхорнны)\r\n    // Поэтому чтобы не допустить ошибку необходимо использовать конструкцию async / await\r\n    // async - ставится перед ф-й (говорит, что в ф-и будет асинхронный код)\r\n    // await - парный оператор. Ставится перед теми учустками которые необходимо подождать\r\n    // Теперь когда мы получим ответ от сервера await пропустит код дальше чтобы не было ошибки\r\n    // Так же ставим в возврате, тк это тоже промис и он может быть большим\r\n\r\n    const postData = async (url, data) => {\r\n        const res = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {'Content-type': 'application/json'},\r\n                body: data,\r\n        });\r\n\r\n        return await res.json();\r\n    };\r\n\r\n    // Ф-я которая будет постить данные с событием 'submit - отправить'\r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (event) => {\r\n            event.preventDefault();\r\n\r\n            // Создаем блок статуса нашего запроса используя объект img\r\n            // Это спиннер загрузки который видно на медленном интернете\r\n            const statusMessage = document.createElement('img');\r\n            statusMessage.src = message.loading;\r\n            statusMessage.style.cssText = `\r\n                display: block;\r\n                margin: 0 auto;\r\n            `;\r\n            // Добавляем это сообщение к форме (сообщение будет там внутри)\r\n              // С помощью метода insertAdjacentElement()\r\n            form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n   \r\n            // Создаем объект, который будет формировать все заполненые данные с формы\r\n            // Ключ - значение. Принимает в себя аргумент функции postData()\r\n            // Главное чтобы отправка сработала нужно в inline input в htlm указать атрибут name=\"something\"\r\n            const formData = new FormData(form);\r\n\r\n            // Тут мы должны превратить  formData в JSON формат, чего напрямую сделать не можем, его нужно \"пересоздать\"\r\n            // Для этого мы создадим переменную и поместим в нее JSON - объект\r\n            // Этот объект получился после преобразования formData в массив а потом обратно в объект\r\n            // Методы Object.entries() и Object.fromEntries()\r\n            // Этот объект приет ф-я postData в кач-ве аргумента\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n            postData('http://localhost:3000/requests', json)\r\n            // Убрали трансформацию JSON в объект тк функция это уже сделала\r\n            // И в data получаем уже обычный объект \r\n            // Код выполняющийся при успешном запросе\r\n            // Показывает благодарность и убирает спинер загрузки\r\n            .then(data => {\r\n                console.log(data);\r\n                showThanksModal(message.success);\r\n                statusMessage.remove();\r\n                // catch() сработает если что то пошло не так\r\n                // Выдаст окно с ошибкой\r\n            }).catch(() => {\r\n                showThanksModal(message.failure);\r\n                // При любом исходе формы очистятся\r\n            }).finally(form.reset());\r\n        });\r\n    }\r\n\r\n    // Ф-я будет изменять благодарственное окно после отправки данных\r\n    // В зависимости от статуса запроса\r\n    // Соответственно аргументом будет сообщение со статусом\r\n    function showThanksModal(message) {\r\n        // получаем само модальное окно\r\n        const prevModalDialog = document.querySelector('.modal__dialog');\r\n\r\n        // Скрывем блок отправки данных добавив класс\r\n        prevModalDialog.classList.add('hide');\r\n        // Теперь мы вызываем структуру модального окна\r\n        // И формируем внутри структуру с благодарностью после отправки данных\r\n        openModal();\r\n\r\n        // Сама структура и ее содержание\r\n        const thanksModal = document.createElement('div');\r\n        thanksModal.classList.add('modal__dialog');\r\n        thanksModal.innerHTML = `\r\n            <div class='modal__content'>\r\n                <div class='modal__close' data-close>×</div>\r\n                <div class='modal__title'>${message}</div>\r\n            </div>\r\n        `;\r\n\r\n        // Тут без создания переменной сразу помещаем в .modal новый контент с созданой благодарностью\r\n        document.querySelector('.modal').append(thanksModal);\r\n\r\n        // Тут мы через 4 секунды убираем благодарственное окно и возвращаем блок заполнения\r\n        // На тот случай если потребуется отправить заявку еще раз\r\n        setTimeout(() => {\r\n            thanksModal.remove();\r\n            prevModalDialog.classList.add('show');\r\n            prevModalDialog.classList.remove('hide');\r\n            closeModal();\r\n        }, 4000);\r\n    }\r\n}\r\n\r\nmodule.exports = forms;","function modal() {\r\n    \r\n    // Modal\r\n    \r\n    const modalTrigger = document.querySelectorAll('[data-modal]'),\r\n          modal = document.querySelector('.modal');\r\n\r\n\r\n    // Ф-я открывает modal окно при вызове\r\n    function openModal() {\r\n        modal.classList.add('show', 'fade');\r\n        modal.classList.remove('hide');\r\n        // modal.classList.toggle('show');\r\n        // Убрать скролл когда modal block\r\n        document.body.style.overflow = 'hidden';\r\n        // Открыв modal сам он не вылезет. Уберем таймер\r\n        clearInterval(modalTimerId);\r\n    }\r\n\r\n    modalTrigger.forEach(btn => {\r\n        btn.addEventListener('click', openModal);\r\n    });\r\n    \r\n    // Ф-я закрывает modal окно при вызовах\r\n    function closeModal() {\r\n        modal.classList.add('hide');\r\n        modal.classList.remove('show', 'fade');\r\n        // Вернуть скролл когда modal none\r\n        document.body.style.overflow = 'scroll';\r\n    }\r\n    \r\n\r\n    modal.addEventListener('click', (event) => {\r\n        // Если таргет на modal (это внешняя щасть модального окна), или это крестик (data-close) то мы его закрываем\r\n        // data-close - это атрибут который мы указали в инлайне этому блоку\r\n        // Так ф-я будет работать на всех крестиках где есть этот дата-атрибут\r\n        if (event.target === modal || event.target.getAttribute('data-close') == '') {\r\n            closeModal(); // - вызываем если срабатывает условие\r\n        }\r\n    });\r\n\r\n    // Закрыть modal при нажатии ESC вешается на документ событие code (event.code)\r\n    document.addEventListener('keydown', (event) => {\r\n        // Проверяется что кнопка нажата именно в момент когда открыто modal с помощью contains()\r\n        if (event.code === 'Escape' && modal.classList.contains('show')) {\r\n            closeModal();\r\n        }\r\n    });\r\n\r\n    const modalTimerId = setTimeout(openModal, 50000);\r\n\r\n    // Вызов modal окна при скролле в конец страницы\r\n    function showModalByScroll() {\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 1) {\r\n            openModal();\r\n            // Удаляем слушатель после первого вызова по скроллу\r\n            window.removeEventListener('scroll', showModalByScroll);\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', showModalByScroll);\r\n}\r\n\r\nmodule.exports = modal;","function slider() {\r\n    \r\n    // Slider\r\n\r\n    // В этом сп-е мы создали в обертке еще один блок <div class=\"offer__slider-inner\"></div>\r\n    // И в него поместили сами слайды\r\n    // Это делается для того чтобы главная обертка была как окошко\r\n\r\n    // Алгоритм\r\n    //  1) Блоку offer__slider-wrapper(обертка) мы назначим overflow: hidden и все что будет шире - скроется\r\n    //  2) Блок offer__slider-inner будет в виде карусели и будет занимать ширину равную ширине всех слайдов вместе\r\n    //      И при нажатии кнопок мы будет не скрывать/показывать а двигать это карусель влево/вправо\r\n\r\n    const slides = document.querySelectorAll('.offer__slide'),\r\n          // Весь блок слайдера с точками и стрелками\r\n          slider = document.querySelector('.offer__slider'),\r\n          prev = document.querySelector('.offer__slider-prev'),\r\n          next = document.querySelector('.offer__slider-next'),\r\n          total = document.querySelector('#total'),\r\n          current = document.querySelector('#current'),\r\n          slidesWrapper = document.querySelector('.offer__slider-wrapper'),\r\n          // Это сама карусель\r\n          slidesField = document.querySelector('.offer__slider-inner'),\r\n          // Эта переменная нужна чтобы получить ширину самой обертки слайдера которая была задана\r\n          width = window.getComputedStyle(slidesWrapper).width;\r\n          \r\n    let slideIndex = 1;\r\n    \r\n    // Эта переменная будет показывать на сколько мы отступили вправо/влево при помощи tranform\r\n    let offset = 0;\r\n\r\n    // Условие для отображения чисел с 0 или без\r\n    if (slides.length < 10) {\r\n        total.textContent = `0${slides.length}`;\r\n        current.textContent = `0${slideIndex}`;\r\n    } else {\r\n        total.textContent = slides.length;\r\n        current.textContent = slideIndex;\r\n    }\r\n\r\n\r\n\r\n    // Кстанавливаем ширину карусели по отношению к кол-ву слайдов (кол-во слайдов умножить на 100%)\r\n    // Те ширина карусели будет равна ширине всех слайдов стоящих подряд в линию\r\n    // Это css стили там еденицы измерения\r\n    slidesField.style.width = 100 * slides.length + '%';\r\n\r\n    // И чтобы слайды расположить в ряд и сделать плавный переход прописываем нужные стили\r\n    slidesField.style.display = 'flex';\r\n    slidesField.style.transition = '0.5s all';\r\n\r\n    // Скрываем то что выходит за рамки wrapper\r\n    slidesWrapper.style.overflow = 'hidden';\r\n\r\n    // Тут перебираем все слайды и говорим чтобы все слайды по ширине были равны ширине обертки (width) которую получили\r\n    // И теперь каждый слайд заполняем весь wrapper\r\n    slides.forEach(slide => {\r\n        slide.style.width = width;\r\n    });\r\n\r\n    // Точки у слайдера\r\n    // Блоку позиционирование чтобы точки можно было располагатьт абсолютно\r\n    slider.style.position = 'relative';\r\n\r\n    // Создаем обертку для всех точек и стилизуем затем помещаем в сам блок слайдера\r\n    const indicators = document.createElement('ol'),\r\n          // Создадим массив для точек чтобы работать с ними в обработчиках событий при переключении слайдов\r\n          dots = [];\r\n    indicators.classList.add('carousel-indicators');\r\n    indicators.style.cssText = `\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0; \r\n        left: 0;\r\n        z-index: 15;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-right: 15%;\r\n        margin-left: 15%;\r\n        list-style: none;\r\n    `;\r\n    slider.append(indicators);\r\n\r\n    // Создаем точки. Их кол-во будет зависеть от кол-ва самих слайдов\r\n    for (let i = 0; i < slides.length; i++) {\r\n        const dot = document.createElement('li');\r\n        // Ставим каждой точке атрибут с нумерацией от 1 и стилизуем\r\n        dot.setAttribute('data-slide-to', i + 1);\r\n        dot.style.cssText = `\r\n            box-sizing: content-box;\r\n            flex: 0 1 auto;\r\n            width: 30px;\r\n            height: 6px;\r\n            margin-right: 3px;\r\n            margin-left: 3px;\r\n            cursor: pointer;\r\n            background-color: #fff;\r\n            background-clip: padding-box;\r\n            border-top: 10px solid transparent;\r\n            border-bottom: 10px solid transparent;\r\n            opacity: .5;\r\n            transition: opacity .6s ease;\r\n        `;\r\n\r\n        if (i == 0) {\r\n            dot.style.opacity = 1;\r\n        }\r\n        // Помещаем точки в обертку для точек\r\n        indicators.append(dot);\r\n        // Добавляем точки в массив\r\n        dots.push(dot);\r\n    }\r\n\r\n    // Ф-я условия показа 0 при однозначных current числах\r\n    function checkCurrentNumbers(current) {\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n    }\r\n\r\n    // Ф-я движения блока карусели в сторону на offset пикселей т.е двигается влево на offset px\r\n    function setTranslateCarousel(offset) {\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n    }\r\n\r\n    // Ф-я которая внутри с помощью регулярных выражений будет превращать строки типа '100px' в число 100 \r\n    // Чтобы записать в offset\r\n    // МОжно так же использовать в будущем но с другими агрументами\r\n    function deleteNotDigits(str) {\r\n        return +str.replace(/\\D/g, '');\r\n    }\r\n\r\n    // Скрпит сдвига по нажатию\r\n    next.addEventListener('click', () => {\r\n        // Условие при котором слайдер возвращается на первый слайд\r\n        // Поскольку в переменной width у нас строка мы удалим две последние буквы и превратим в число с помощьью (+)\r\n        // Удалим при помощи регулярных выражений и удалим все не числа и превратим '100px' в число 100 например\r\n        if (offset == deleteNotDigits(width) * (slides.length - 1)) {\r\n            offset = 0;\r\n        } else {\r\n            // Когда нажимаем стрелку то прибавляется ширина еще одного слайда и все сдвигается влево\r\n            offset += deleteNotDigits(width);\r\n        }\r\n\r\n        // Движение блока карусели в сторону на offset пикселей т.е двигается влево на offset px\r\n        setTranslateCarousel(offset);\r\n\r\n        // Условия при котором счетчик будет возвращаться в положение 1 если next на последнем слайде\r\n        // И else он просто увеличивается\r\n        if (slideIndex == slides.length) {\r\n            slideIndex = 1;\r\n        } else {\r\n            slideIndex++;\r\n        }\r\n\r\n        // Ф-я условия показа 0 при однозначных current числах\r\n        checkCurrentNumbers(current);\r\n        setDotOpacity(dots);\r\n    });\r\n\r\n    prev.addEventListener('click', () => {\r\n        // Условие при котором слайдер возвращается на последний слайд\r\n        // Если мы находимся на первом слайде и жмем кнопку то перемещаемся на последний слайд\r\n        if (offset == 0) {\r\n            offset = deleteNotDigits(width) * (slides.length - 1);\r\n        } else {\r\n            offset -= deleteNotDigits(width);\r\n        }\r\n\r\n        // Движение блока карусели в сторону на offset пикселей т.е двигается влево на offset px\r\n        setTranslateCarousel(offset);\r\n\r\n        // Тут условие если мы находимся на 1 слайде и проматываем влево и попадаем на последний слайд\r\n        if (slideIndex == 1) {\r\n            slideIndex = slides.length;\r\n        } else {\r\n            slideIndex--;\r\n        }\r\n\r\n        // Ф-я условия показа 0 при однозначных current числах\r\n        checkCurrentNumbers(current);\r\n        setDotOpacity(dots);\r\n    });\r\n    \r\n    dots.forEach(dot => {\r\n        dot.addEventListener('click', (e) => {\r\n            const slideTo = e.target.getAttribute('data-slide-to');\r\n\r\n            slideIndex = slideTo;\r\n            offset = deleteNotDigits(width) * (slideTo - 1);\r\n\r\n            // Движение блока карусели в сторону на offset пикселей т.е двигается влево на offset px\r\n            setTranslateCarousel(offset);\r\n\r\n            // Ф-я условия показа 0 при однозначных current числах\r\n            checkCurrentNumbers(current);\r\n            //Ф-я перебора точек и установка прозрачности\r\n            setDotOpacity(dots);\r\n        });\r\n    });\r\n\r\n    // Ф-я перебора точек и установка прозрачности\r\n    // Перебираем точки и всем ставим прозрачность 50%\r\n    // А та точка которая по интексу совпадает со слайдом будет иметь прозрачность 1\r\n    function setDotOpacity(dots) {\r\n        dots.forEach(dot => dot.style.opacity = '.5');\r\n        dots[slideIndex - 1].style.opacity = 1;\r\n    }\r\n}\r\n\r\nmodule.exports = slider;","function tabs() {\r\n    \r\n    // Tabs\r\n\r\n    const tabs = document.querySelectorAll('.tabheader__item'), // - табы (именования табов таблица)\r\n          tabsContent = document.querySelectorAll('.tabcontent'), // - сами табы с контентом\r\n          tabsParent = document.querySelector('.tabheader__items'); // - окно с табами\r\n\r\n    // - Ф-я которая изначально скрывает все табы\r\n    function hideTabContent() {\r\n        tabsContent.forEach(item => {\r\n            item.classList.add('hide');\r\n            item.classList.remove('show', 'fade');\r\n        });\r\n        // - Убираем активность у имени табов \r\n        tabs.forEach(item => {\r\n            item.classList.remove('tabheader__item_active');\r\n        });\r\n    }\r\n\r\n    // - Ф-я показа табов (изначально первого) (i = 0 это по умолчанию)\r\n    // - Показывает сам таб блок и активность в списке\r\n    function showTabContent(i = 0) {\r\n        tabsContent[i].classList.add('show', 'fade');\r\n        tabsContent[i].classList.remove('hide');\r\n        tabs[i].classList.add('tabheader__item_active');\r\n    }\r\n\r\n\r\n    // - Запускаем ф-и для изначального отображения\r\n    hideTabContent();\r\n    showTabContent();\r\n\r\n\r\n    // - Тут мы создаем для окна с табами делигирование событий чтобы получить и повесить события на доч. элементы \r\n    tabsParent.addEventListener('click', (event) => {\r\n        const target = event.target;\r\n\r\n    // - Если нажатый элемент имеет класс 'tabheader__item' т.е. если мы на него нажали выполняем условие\r\n    // - Перебираем сами наименования табов в таблице с forEach() \r\n    // - И как только перебираемый элемент равен тому который в таргете то вызываем ф-ии показа по номеру индекса\r\n    // - Эти элементы будут равны тк по сути работаем с одинми и теми же элементами\r\n    // - Только одни получены как дочерние через делигирование а вторые через перебор с forEach()\r\n        if (target && target.classList.contains('tabheader__item')) {\r\n            tabs.forEach((item, i) => {\r\n                if (target == item) {\r\n                    console.dir(target);\r\n                    console.dir(item);\r\n                    hideTabContent();\r\n                    showTabContent(i);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n// Экспортируем модуль синтаксисом CommonJS\r\nmodule.exports = tabs;","function timer() {\r\n    \r\n    // Timer\r\n\r\n    const deadline = '2023-04-11'; // - это дедлайн\r\n\r\n    // Это ф-я которая будет получать и обрабатывать разницу между дедлайном и нынешней датой\r\n    function getTimeRemaining(endtime) {\r\n        let days, hours, minutes, seconds;\r\n        const t = Date.parse(endtime) - Date.parse(new Date());\r\n\r\n        // Условия чтобы стояли нули если дата прошла\r\n        if (t <= 0) {\r\n            days = 0;\r\n            hours = 0;\r\n            minutes = 0;\r\n            seconds = 0;\r\n        } else {\r\n            days = Math.floor(t / (1000 * 60 * 60 * 24)),\r\n            hours = Math.floor((t / (1000 * 60 * 60) % 24)),\r\n            minutes = Math.floor((t / 1000 / 60) % 60),\r\n            seconds = Math.floor((t / 1000) % 60);\r\n        }\r\n              \r\n\r\n        // Возвращаем полученные даты\r\n        return {\r\n            'total': t,\r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        };\r\n    }\r\n\r\n    // Ф-я добавляет нули перед одиночными числами\r\n    function getZero(num) {\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`;\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n\r\n    // Это ф - я установки таймера где в переменные мы получаем DOM - элементы для дат\r\n    // Аргументы это сам селектор .timer в верстке и дедлайн\r\n    function setClock(selector, endtime) {\r\n        const timer = document.querySelector(selector),\r\n              days = timer.querySelector('#days'),\r\n              hours = timer.querySelector('#hours'),\r\n              minutes = timer.querySelector('#minutes'),\r\n              seconds = timer.querySelector('#seconds'),\r\n              timeInterval = setInterval(updateClock, 1000);\r\n\r\n        // СРазу вызываем ф-ю чтобы таймер обновлялся моментально без загрузки\r\n        updateClock();\r\n\r\n        // Ф-я обновления таймера - подставляет нужное нам время под таймер\r\n        // Внутри вызываем ф-ю getTimeRemaining() для которой аргумент это дэдлайн\r\n        function updateClock() {\r\n            const t = getTimeRemaining(endtime);\r\n\r\n            // В переменной t будет объект который возвращает ф-я getTimeRemaining()\r\n            // И через t мы получаем доступ к дням часам и тд\r\n            // Присвамиваем с функцией getZero(), чтобы перед одиночными числами ставился ноль\r\n            days.innerHTML = getZero(t.days);\r\n            hours.innerHTML = getZero(t.hours);\r\n            minutes.innerHTML = getZero(t.minutes);\r\n            seconds.innerHTML = getZero(t.seconds);\r\n\r\n            if (t.total <= 0) {\r\n                clearInterval(timeInterval);\r\n            }\r\n        }\r\n    }\r\n    \r\n    setClock('.timer', deadline);\r\n}\r\n\r\nmodule.exports = timer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","window.addEventListener('DOMContentLoaded', () => {\r\n    const tabs = require('./modules/tabs'),\r\n          modal = require('./modules/modal'),\r\n          timer = require('./modules/timer'),\r\n          cards = require('./modules/cards'),\r\n          calc = require('./modules/calc'),\r\n          forms = require('./modules/forms'),\r\n          slider = require('./modules/slider');\r\n          \r\n    tabs();\r\n    modal();\r\n    timer();\r\n    cards();\r\n    calc();\r\n    forms();\r\n    slider();\r\n});\r\n\r\n\r\n "],"names":[],"sourceRoot":""}